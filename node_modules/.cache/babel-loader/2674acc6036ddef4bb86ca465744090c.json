{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahie\\\\Desktop\\\\ReactProjects\\\\movie-list-react\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  // 2. we create a new hook to store the transformed data\n  const [movies, setMovies] = useState([]);\n  const [isloading, setIsLoading] = useState(false); // 7. convert all to an asynchronous function, which is what we did here\n  // 6. the final play is to connect the function to the button bellow\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true); // 1. this is us fetching the data from the api\n\n    const response = await fetch(\"https://swapi.dev/api/films\");\n    const data = await response.json(); // 4. Because there is a difference between how the data is\n    // presented in the MoviesList.js component, we have to either\n    // change the way its set up there to match the data we will receive\n    // or change the the way we receive the data here. we chose option 2.\n\n    const transformedMovies = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      };\n    }); // 3/5. here we set the transformed data to the new state\n\n    setMovies(transformedMovies);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mahie/Desktop/ReactProjects/movie-list-react/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isloading","setIsLoading","fetchMoviesHandler","response","fetch","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAHa,CAKb;AACA;;AACA,iBAAeO,kBAAf,GAAoC;AAClCD,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADkC,CAGlC;;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CALkC,CAMlC;AACA;AACA;AACA;;AACA,UAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACxD,aAAO;AACLC,QAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,QAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,QAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,OAAP;AAMD,KAPyB,CAA1B,CAVkC,CAmBlC;;AACAlB,IAAAA,SAAS,CAACQ,iBAAD,CAAT;AACD;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEL,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEJ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF;AAUD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  // 2. we create a new hook to store the transformed data\n  const [movies, setMovies] = useState([]);\n  const [isloading, setIsLoading] = useState(false)\n\n  // 7. convert all to an asynchronous function, which is what we did here\n  // 6. the final play is to connect the function to the button bellow\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n\n    // 1. this is us fetching the data from the api\n    const response = await fetch(\"https://swapi.dev/api/films\");\n    const data = await response.json();\n    // 4. Because there is a difference between how the data is\n    // presented in the MoviesList.js component, we have to either\n    // change the way its set up there to match the data we will receive\n    // or change the the way we receive the data here. we chose option 2.\n    const transformedMovies = data.results.map((movieData) => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      };\n    });\n\n    // 3/5. here we set the transformed data to the new state\n    setMovies(transformedMovies);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}